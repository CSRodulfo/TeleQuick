// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using TeleQuick.Business.Models;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using TeleQuick.Business.Models;

namespace TeleQuick.DataAcces
{
    public partial class ApplicationDbContext 
    {
        public ApplicationDbContext()
        {
        }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AccountSession> AccountSessions { get; set; }
        public virtual DbSet<Concessionary> Concessionaries { get; set; }
        public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }
        public virtual DbSet<InvoiceHeader> InvoiceHeaders { get; set; }
        public virtual DbSet<TagRfid> TagRfids { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccountSession>(entity =>
            {
                entity.HasIndex(e => e.ConcessionaryId);
            });

            modelBuilder.Entity<Concessionary>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.MainForm).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Uri).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<InvoiceDetail>(entity =>
            {
                entity.HasIndex(e => e.InvoiceHeaderId);

                entity.HasOne(d => d.InvoiceHeader)
                    .WithMany(p => p.InvoiceDetails)
                    .HasForeignKey(d => d.InvoiceHeaderId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.InvoiceDetails)
                    .HasForeignKey(d => d.VehicleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvoiceDetails_Vehicles");
            });

            modelBuilder.Entity<InvoiceHeader>(entity =>
            {
                entity.HasOne(d => d.Concessionary)
                    .WithMany(p => p.InvoiceHeaders)
                    .HasForeignKey(d => d.ConcessionaryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InvoiceHeaders_Concessionaries");
            });

            modelBuilder.Entity<TagRfid>(entity =>
            {
                entity.HasIndex(e => e.VehicleId);

                entity.HasOne(d => d.Vehicle)
                    .WithMany(p => p.TagRfids)
                    .HasForeignKey(d => d.VehicleId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}