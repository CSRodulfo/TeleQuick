// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using TeleQuick.Business;
using TeleQuick.Business.Models;

namespace TeleQuick.DataAcces
{
    public partial class ApplicationDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, string>
    {
        public ApplicationDbContext(DbContextOptions options) : base(options)
        { 
        
        }
  
        public virtual DbSet<AccountSession> AccountSessions { get; set; }
        public virtual DbSet<Concessionary> Concessionaries { get; set; }
        public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }
        public virtual DbSet<InvoiceHeader> InvoiceHeaders { get; set; }
        public virtual DbSet<TagRfid> TagRfids { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            base.OnModelCreating(modelBuilder);
            const string priceDecimalType = "decimal(18,2)";

            modelBuilder.Entity<ApplicationUser>().HasMany(u => u.Claims).WithOne().HasForeignKey(c => c.UserId).IsRequired().OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<ApplicationUser>().HasMany(u => u.Roles).WithOne().HasForeignKey(r => r.UserId).IsRequired().OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<ApplicationRole>().HasMany(r => r.Claims).WithOne().HasForeignKey(c => c.RoleId).IsRequired().OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<ApplicationRole>().HasMany(r => r.Users).WithOne().HasForeignKey(r => r.RoleId).IsRequired().OnDelete(DeleteBehavior.Cascade);



            modelBuilder.Entity<AccountSession>(entity =>
            {
                entity.HasIndex(e => e.ConcessionaryId);
            });

            modelBuilder.Entity<Concessionary>(entity =>
            {
                entity.Property(e => e.MainForm).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Uri).HasDefaultValueSql("(N'')");
            });

            modelBuilder.Entity<InvoiceDetail>(entity =>
            {
                entity.HasIndex(e => e.InvoiceHeaderId);
            });

            modelBuilder.Entity<InvoiceHeader>(entity =>
            {
                entity.HasIndex(e => e.VehicleId);
            });

            modelBuilder.Entity<TagRfid>(entity =>
            {
                entity.HasIndex(e => e.VehicleId);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}